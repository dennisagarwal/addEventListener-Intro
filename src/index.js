import "./styles.css";

//callback functions are functions that take other functions as parameter

function printHello() {
  console.log("Hello!");
}

setTimeout(printHello, 3000);
//if we will put the bracket() after printHello, it will run the function immediately.

//Anonymous Callback
//When we pass the complete function as parameter
setTimeout(function () {
  console.log("Hello Santa Clause!");
}, 3000);

setTimeout(() => {
  console.log("Hello Santa Clause Arrow Function!");
}, 3000);

//callback functions are used for the events

//JavaScript Event
//Events can be generated by a User, an API,
//or by some external resource

window.onclick = function clickHandler(event) {
  console.log("Window Clicked!");
  for (let count = 0; count < 10; count++) {
    if (clickHandler) {
      console.log(count++);
    } else console.log("no click");
  }
};

//Event Handler ususlly has a word "on"

//Asynchronous functions which wait for one function
// to complete first

function buttonHandler(event) {
  console.log("button is clicked");
}

const button = document.querySelector(`.button`);

//Add the event directy
button.onclick = buttonHandler;

//Add the event handler as a 'listener' function
//for the click event- prefered way
button.addEventListener("click", buttonHandler);

//calling setTimeout inside clicked event
const myButton3 = document.querySelector(`.myButton3`);
myButton3.addEventListener("click", function () {
  setTimeout(function () {
    console.log("This is a test");
  }, 1000);
});

const myButton4 = document.querySelector(`.myButton4`);
myButton4.addEventListener("mousemove", function () {
  setTimeout(function () {
    console.log("This is a test");
  }, 1000);
});
